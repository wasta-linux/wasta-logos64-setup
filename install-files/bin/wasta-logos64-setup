#!/bin/bash

# ==============================================================================
# Logos Wine Setup
#   - Create Logos Wine Prefix
#   - Install .NET 4.8 in Logos Wine Prefix
#   - Install Logos
#
#   2019-09-28 rik: initial script
#   2019-10-04 rik: adding logos download option and additional error processing
#   2019-10-06 rik: adding winetricks ddr=gdi to address graphical glitches
#   2019-10-10 rik: moving winetricks to /usr/local/bin
#   2019-10-20 rik: re-working logic to determine if postinst needs run
#   2019-10-25 rik: re-working logic to use wasta-wine, wasta-winetricks, and
#       wasta-logos-installer
#   2019-12-06 rik: removing "LC_ALL=C" from launcher (prevents using saved
#       layouts)
#   2020-03-12 rik: updating logo
#   2020-05-11 rik: adding sleep before launcher edits
#   2020-05-18 rik: setting Downloads folder from xdg-user-dir
#   2020-05-25 ndm: updating with tips from ferion11 install script
#
# ==============================================================================

# ------------------------------------------------------------------------------
# Ensure script running as regular user
# ------------------------------------------------------------------------------
if [ $(id -u) -eq 0 ]
then
    echo "wasta-logos64-setup started as root user."
    echo "No processing done.  Exiting...."
    exit 0
fi


# ------------------------------------------------------------------------------
# Set global variables.
# ------------------------------------------------------------------------------
# TODO: export WINE variables to avoid having to put them in each command?

# Directories
WINE_DIR=/opt/wasta-wine64
WINELOADER="${WINE_DIR}/bin/wine64"
if [[ ! -x "$WINELOADER" ]]; then
    echo "$WINELOADER not found."
    if [[ $(which wine64) ]]; then
        # Fallback to system wine64.
        WINELOADER=$(which wine64)
        echo "Falling back to $WINELOADER"
    else
        echo "No wine64 available!"
    fi
fi
export WINELOADER
# WINE="$WINELOADER"
# export WINE
WINEARCH="win64"
export WINEARCH
WINESERVER="${WINE_DIR}/bin/wineserver"
export WINESERVER
WINETRICKS_DIR=/opt/wasta-winetricks
WINETRICKS_EXE="${WINETRICKS_DIR}/winetricks"
if [[ ! -x "$WINETRICKS_EXE" ]]; then
    echo "$WINETRICKS_EXE not found."
    if [[ $(which winetricks) ]]; then
        # Fallback to system winetricks.
        WINETRICKS_EXE=$(which winetricks)
        echo "Falling back to $WINETRICKS_EXE"
    else
        echo "No winetricks available!"
        exit 1
    fi
fi
INSTALLER_DIR=/opt/wasta-logos64-installer
DOWNLOAD_DIR="$(xdg-user-dir DOWNLOAD)"
DIR=/usr/share/wasta-logos64-setup
WINEPREFIX=/home/$USER/.wine-logos64
export WINEPREFIX
WINEDLLOVERRIDES="mscoree,mshtml,winemenubuilder.exe="
export WINEDLLOVERRIDES
ZENITY_SETTINGS="--no-wrap --height=200 --width=500 --window-icon=$DIR/resources/wasta-linux.svg"


# ------------------------------------------------------------------------------
# Define functions.
# ------------------------------------------------------------------------------
setupPrefix () {
    ### Setup the WINE prefix for Logos.

    cleanupPrefix

    # Copy in winetricks cache.
    mkdir -p $HOME/.cache/winetricks
    rsync -av $WINETRICKS_DIR/winetricks-cache/ $HOME/.cache/winetricks/ | tee >(zenity \
        --height=150 --width=450 --progress --pulsate --auto-close \
        --window-icon=$DIR/resources/wasta-linux.svg \
        --title="Copying Winetricks Cache" \
        --text="Copying Winetricks Cache... \n\n")

    # Initialize prefix.
    # Note: WINEDLLOVERRIDES was added to try to prevent mono and gecko prompts.
    #   But some users are having freezing issues so I am reverting this.
    "$WINELOADER" wineboot | zenity \
        --height=150 --width=450 --progress --pulsate --auto-close \
        --window-icon=$DIR/resources/wasta-linux.svg \
        --title="Setting up Wine Prefix" \
        --text="Setting up Wine Prefix... \n\n" &
    # get zenity process id
    PID_ZENITY=$!

    # get firstly created process id, which is running parallel to zenity
    PID_PROCESS=$(pgrep -o -P $$)

    progressCheck $PID_ZENITY $PID_PROCESS
    if [ "$?" -eq 99 ]; then
        # zenity canceled, Prefix setup didn't complete
        # some failure: exit
        errorExit "<b>Setup of Logos Wine Prefix failed!</b>"
    fi

    # Make sure residual wineprocesses clear out.
    wait_for_wineserver

    # Make registry changes.
    # NOTE: The following is done with WINEDLLOVERRIDES above.
    # wine_reg_install "${DIR}/data/disable-winemenubuilder.reg"
    # NOTE: The following is installed with winetricks below.
    # wine_reg_install "${DIR}/data/renderer_gdi.reg"

    # Install helpful packages and settings.
    # TODO: Test use of "-q" option for installs.
    # NOTES:
    # - TODO: ferion does not install dotnet40 explicitly; not needed?
    # - https://wiki.archlinux.org/index.php/Wine#Enable_font_smoothing
    # - SetDirectDrawRender to GDI solves graphical glitching of various menus,
    #   etc disappearing / reappearing)
    installs=( \
        "corefonts" \
        "ddr=gdi" \
        "settings fontsmooth=rgb" \
        "dotnet48" \
    )
    for i in "${installs[@]}"; do
        echo "Running winetricks $i..."

        # TODO: This "hides" any winetricks output. Maybe not a problem if
        #   everything goes right?
        "$WINETRICKS_EXE" -q $i | zenity \
            --height=150 --width=450 --progress --pulsate --auto-close \
            --window-icon=$DIR/resources/wasta-linux.svg \
            --title="Installing with winetricks" \
            --text="winetricks $i... \n\n" &

        # Get zenity process id.
        PID_ZENITY=$!

        # Get firstly created process id, which is running parallel to zenity.
        PID_PROCESS=$(pgrep -o -P $$)

        progressCheck $PID_ZENITY $PID_PROCESS
        if [ "$?" -eq 99 ]; then
            # Zenity canceled, winetricks install didn't complete.
            errorExit "<b>$i install in Logos Wine Prefix failed!</b>"
        fi

        # The following is ferion11's method, for reference:
        # # Make pipe for zenity input.
        # pipe_winetricks="$(mktemp)"
        # rm -rf "$pipe_winetricks"
        # mkfifo "$pipe_winetricks"
        #
        # # zenity GUI feedback
    	# zenity --progress --title="Installing with winetricks $i" \
        #     --text="Installing with winetricks $i" --pulsate --auto-close \
        #     --window-icon=$DIR/resources/wasta-linux.svg \
        #     --height=150 --width=450 < "$pipe_winetricks" &
        # # Get zenity process id.
        # PID_ZENITY="${!}"
        #
        # "$WINETRICKS_DIR/winetricks" -q $i | tee "$pipe_winetricks"
        # EC_WINETRICKS=$?
        #
        # wait "$PID_ZENITY"
        # EC_ZENITY=$?
        #
        # rm -rf "$pipe_winetricks"
        #
        # # NOTE: sometimes the process finishes before the wait command, giving the error code 127
    	# if [ "$EC_ZENITY" == "0" ] || [ "$EC_ZENITY" == "127" ] ; then
    	# 	if [ "$EC_WINETRICKS" != "0" ] ; then
    	# 		wineserver -k
    	# 		echo "ERROR on : winetricks $i; EC_WINETRICKS: $EC_WINETRICKS"
    	# 		gtk_fatal_error "The installation was cancelled because of sub-job failure!\n * winetricks ${*}\n  - WINETRICKS_STATUS: ${WINETRICKS_STATUS}"
    	# 	fi
    	# else
    	# 	wineserver -k
    	# 	gtk_fatal_error "The installation was cancelled!\n * ZENITY_RETURN: ${ZENITY_RETURN}"
    	# fi

        # Ensure that wineserver finishes.
        wait_for_wineserver "${WINEPREFIX}"
    done

    cleanupPrefix
}

errorExit () {
    ### Exit script with passed message.

    zenity --error --no-wrap --height=200 \
        --title="wasta-logos64-setup: Error" \
        --window-icon=$DIR/resources/wasta-linux.svg \
        --text="$1 \n
<i>wasta-logos64-setup will now exit.</i>" >/dev/null 2>&1
    exit 1
}

cleanupPrefix () {
    ### Perform various cleanup items for the Logos wine prefix.

    # remove desktop entries referencing $PREFIX.
    # note: grep --null returns null separated list to handle space in filenames
    # note: xargs -0 to handle null separated items
    if [[ -d "$HOME/.local/share/applications" ]]; then
        grep -r -l --null "$WINEPREFIX" "$HOME/.local/share/applications" \
            | xargs -0 rm >/dev/null 2>&1
    fi
}

progressCheck () {
    PID_ZENITY="$1"
    PID_PROCESS="$2"
    ### Check on process launched in parallel with zenity.
    ###     If zenity is canceled, then kill process.

    echo
    echo "*** Watching zenity process. If it is canceled then kill PID_PROCESS: $PID_PROCESS"
    echo

    # loop to check that progress dialog has not been cancelled
    while [ "$PID_ZENITY" != "" ]
    do
        # check if zenity PID is still there (dialog box still open)
        PID_ZENITY=$(ps h -o pid --pid ${PID_ZENITY} | xargs)

        # sleep for 2 seconds
        sleep 2
    done

    # if other task still there, kill it
    ps "${PID_PROCESS}"
    if [ "$?" -eq 0 ];
    then
        # parallel process STILL FOUND: user canceled so kill it!
        echo
        echo "*** Zenity process ended (canceled) before parallel process: Killing PID_PROCESS: $PID_PROCESS"
        echo
        kill -9 ${PID_PROCESS}
        return 99
    else
        # parallel process NOT found after zenity completed: both completed
        echo
        echo "*** Zenity process and parallel process both ended: success"
        echo
        return 0
    fi
}

wait_for_wineserver() {
    ### Run "wineserver -w" and show zenity progress window.

    if [[ -d ${1} ]]; then
        # Directory passed. Wait for it to be free before continuing.
        echo "Ignoring argument $1"
        # wait_for_process_using_dir "${1}" | zenity --progress --title="Waiting for $WINELOADER proper end" --text="Waiting for $WINELOADER to end properly..." --pulsate --auto-close --no-cancel
    fi
	echo "* Waiting for wine64 to end properly..."
	"$WINESERVER" -w | zenity --progress --title="Waiting for $WINELOADER proper end" --text="Waiting for $WINELOADER to end properly..." --pulsate --auto-close --no-cancel
}

wait_for_process_using_dir() {
    ### Wait on all processes that are using the ${1} directory to finish.

	VERIFICATION_DIR="${1}"
	VERIFICATION_TIME=7
	VERIFICATION_NUM=3

	echo "---------------------"
	echo "* Starting wait_for_process_using_dir..."
	i=0 ; while true; do
		i=$((i+1))
		echo "-------"
		echo "wait_for_process_using_dir: loop with i=${i}"

		echo "wait_for_process_using_dir: sleep ${VERIFICATION_TIME}"
		sleep "${VERIFICATION_TIME}"

		FIST_PID="$(lsof -t "${VERIFICATION_DIR}" | head -n 1)"
		echo "wait_for_process_using_dir FIST_PID: ${FIST_PID}"
		if [ -n "${FIST_PID}" ]; then
			i=0
			echo "wait_for_process_using_dir: tail --pid=${FIST_PID} -f /dev/null"
			tail --pid="${FIST_PID}" -f /dev/null
			continue
		fi

		echo "-------"
		[ "${i}" -lt "${VERIFICATION_NUM}" ] || break
	done
	echo "* End of wait_for_process_using_dir."
	echo "---------------------"
}

wine_reg_install() {
    ### Install wine registry entries.

    REG_FILENAME="${1}"
    echo "$WINELOADER regedit.exe ${REG_FILENAME}"
    "$WINELOADER" regedit.exe "${WORKDIR}"/"${REG_FILENAME}" | zenity --progress --title="Wine regedit" --text="Wine is installing ${REG_FILENAME} in ${WINEPREFIX}" --pulsate --auto-close --no-cancel

    wait_for_wineserver
    echo "$WINELOADER regedit.exe ${REG_FILENAME} DONE!"
}


# ==============================================================================
# Main Processing
# ==============================================================================

zenity --question $ZENITY_SETTINGS \
    --title="wasta-logos64-setup" \
    --text="<b>Do you want to install Logos (64bit) using Wine?</b>\n
<b>Processing Summary:</b>
   * Create a 'Logos 64bit Wine Prefix' using a patched wine from 'wasta-wine64'
   * Install .NET 4.8 from 'wasta-winetricks'
   * Install Logos"
if [ "$?" -ne 0 ]; then
    # User didn't say yes; exit.
    exit 0
fi

# ------------------------------------------------------------------------------
# Setup Logos Prefix and install Logos
# ------------------------------------------------------------------------------
if [[ -d "$WINEPREFIX" ]]; then
    # WINEPREFIX exists, ask user if they want to overwrite it or update it.
    zenity --question $ZENITY_SETTINGS \
        --title="wasta-logos64-setup" \
        --text="<b>Remove existing Logos 64bit Wine Prefix?</b>\n
<i>The folder <u>'$WINEPREFIX'</u> already exists. Do you want to
delete it in order to re-setup a new Logos 64bit Wine Prefix?</i>\n"

    if [ "$?" -eq 0 ];
    then
        # Remove WINEPREFIX.
        rm -rf $WINEPREFIX
    fi
    setupPrefix
else
    # No WINEPREFIX: prompt user.
    zenity --question $ZENITY_SETTINGS \
        --title="wasta-logos64-setup" \
        --text="<b>Setup Logos 64bit Wine Prefix?</b>\n
<i>Do you want to setup a new Logos 64bit Wine Prefix?</i>\n"

    if [ "$?" -eq 0 ];
    then
        # User said yes: setup WINEPREFIX.
        setupPrefix
    else
        exit 0
    fi
fi
echo "Prefix setup complete."
if [[ -d "$WINEPREFIX" ]]; then
    INSTALL_FILE=""
    if [[ -e "$DOWNLOAD_DIR/Logos-x64.msi" ]]; then
        INSTALL_FILE="$DOWNLOAD_DIR/Logos-x64.msi"
    elif [[ -e "$INSTALLER_DIR/Logos-x64.msi" ]]; then
        INSTALL_FILE="$INSTALLER_DIR/Logos-x64.msi"
    else
        errorExit "<b>A Logos 64bit installer wasn't found in your <i>Downloads</i> folder
or from the <i>'wasta-logos64-installer'</i> package.</b> You will need to put the
installer in one of these two locations and then re-run <i>wasta-logos64-setup</i>.

The recommended method is to install the <i>'wasta-logos64-installer'</i> package."
    fi

    echo
    echo "*** Logos installation file: $INSTALL_FILE"
    echo

    if [[ "$INSTALL_FILE" ]]; then
        # Make Winecfg launcher available for user.
        mkdir -p $HOME/.local/share/applications
        cp $DIR/resources/wine-logos64-winecfg.desktop $HOME/.local/share/applications/

        # Set Wine to win7 for Logos install
        # TODO: ferion doesn't change the Win type. Needs testing.
        # WINEPREFIX=$PREFIX WINE="$WINELOADER" WINESERVER="$WINESERVER" "$WINETRICKS_DIR/winetricks" -q win7

        "${WINE_DIR}/bin/msiexec" /i "$INSTALL_FILE"
        OUTNUM=$?
        if [[ "$OUTNUM" -ne 0 ]]; then
            # Some failure: exit
            errorExit "<b>Logos 64bit installation failed!</b>\n
<i>Some error encountered with installation file:</i>\n
$INSTALL_FILE"
        fi

        # Set Wine to Vista for Logos indexer.
        "$WINELOADER" reg add "HKCU\\Software\\Wine\\AppDefaults\\LogosIndexer.exe" /v Version /t REG_SZ /d vista /f

        # TODO: Verify that this fixes the need for the following sleep command.
        # Wait for wineserver to finish.
        wait_for_wineserver "$WINEPREFIX"
        # not sure why but below edits to launcher were not getting applied
        #   with a message that the file wasn't found:
        #   Adding sleep to see if helps
        # sleep 2

        # point to specific version of wine to run Logos
        sed -i -e "s@ //bin/wine @ $WINELOADER @" $HOME/.local/share/applications/wine/Programs/Logos\ Bible\ Software.desktop

        # Set Wine to winxp for Logos Usage
        # WINEPREFIX=$PREFIX WINE="$WINELOADER" WINESERVER="$WINESERVER" "$WINETRICKS_DIR/winetricks" -q winxp

        zenity --info $ZENITY_SETTINGS \
            --title="wasta-logos64-setup: Complete" \
            --text="<b>Logos 64bit setup complete!</b>\n
<i>Find 'Logos Bible Software' in the <u>Main Menu</u>
under the <u>'Wine'</u> category</i>"
    else
        # not a valid 'logos*.msi' file: exit
        errorExit "<b>No valid Logos-x64.msi found.</b>"
    fi
fi

exit 0
