#!/bin/bash

# ==============================================================================
# Logos Wine Setup
#   - Create Logos Wine Prefix
#   - Install .NET 4.8 in Logos Wine Prefix
#   - Install Logos
#
#   2019-09-28 rik: initial script
#   2019-10-04 rik: adding logos download option and additional error processing
#   2019-10-06 rik: adding winetricks ddr=gdi to address graphical glitches
#   2019-10-10 rik: moving winetricks to /usr/local/bin
#   2019-10-20 rik: re-working logic to determine if postinst needs run
#   2019-10-25 rik: re-working logic to use wasta-wine, wasta-winetricks, and
#       wasta-logos-installer
#   2019-12-06 rik: removing "LC_ALL=C" from launcher (prevents using saved
#       layouts)
#   2020-03-12 rik: updating logo
#   2020-05-11 rik: adding sleep before launcher edits
#   2020-05-18 rik: setting Downloads folder from xdg-user-dir
#   2020-05-25 ndm: updating with tips from ferion11 install script
#
# ==============================================================================

# ------------------------------------------------------------------------------
# Ensure script running as regular user
# ------------------------------------------------------------------------------
if [[ $(id -u) -eq 0 ]]; then
    echo "wasta-logos64-setup started as root user."
    echo "No processing done.  Exiting...."
    exit 0
fi


# ------------------------------------------------------------------------------
# Set global variables.
# ------------------------------------------------------------------------------

# Directories
DIR=/usr/share/wasta-logos64-setup
WINE_DIR=/opt/wasta-wine64
INSTALLER_DIR=/opt/wasta-logos64-installer
DOWNLOAD_DIR="$(xdg-user-dir DOWNLOAD)"
WINETRICKS_DIR=/opt/wasta-winetricks

# Zenity settings.
ZENITY_SETTINGS="--height=200 --width=500 --window-icon=$DIR/resources/wasta-linux.svg"

# Executables
WINELOADER="${WINE_DIR}/bin/wine64"
if [[ ! -x "$WINELOADER" ]]; then
    echo "$WINELOADER not found."
    if [[ $(which wine64) ]]; then
        # Fallback to system wine64.
        WINELOADER=$(which wine64)
        echo "Falling back to $WINELOADER"
    else
        echo "No wine64 available!"
        exit 1
    fi
fi
WINESERVER="${WINE_DIR}/bin/wineserver"
if [[ ! -x "$WINESERVER" ]]; then
    echo "$WINESERVER not found."
    if [[ $(which msiexec) ]]; then
        # Fallback to system msiexec.
        WINESERVER=$(which wineserver)
        echo "Falling back to $WINESERVER"
    else
        echo "No wineserver available!"
        exit 1
    fi
fi
WINETRICKS_EXE="${WINETRICKS_DIR}/winetricks"
if [[ ! -x "$WINETRICKS_EXE" ]]; then
    echo "$WINETRICKS_EXE not found."
    if [[ $(which winetricks) ]]; then
        # Fallback to system winetricks.
        WINETRICKS_EXE=$(which winetricks)
        echo "Falling back to $WINETRICKS_EXE"
    else
        echo "No winetricks available!"
        exit 1
    fi
fi
MSIEXEC="${WINE_DIR}/bin/msiexec"
if [[ ! -x "$MSIEXEC" ]]; then
    echo "$MSIEXEC not found."
    if [[ $(which msiexec) ]]; then
        # Fallback to system msiexec.
        MSIEXEC=$(which msiexec)
        echo "Falling back to $MSIEXEC"
    else
        echo "No msiexec available!"
        exit 1
    fi
fi

# Export WINE* variables to avoid having to use them explicitly.
export WINE="$WINELOADER" # needed for winetricks
export WINEARCH="win64"
# Note: WINEDLLOVERRIDES was added to try to prevent mono and gecko prompts.
#   But some users are having freezing issues so I am reverting this.
# Note: winemenubuilder.exe could be disabled here, but it results in tons of
#   scary-looking but benign errors. It is instead disabled with a registry
#   entry later.
export WINEDLLOVERRIDES="mscoree,mshtml="
export WINELOADER
export WINEPREFIX="$HOME/.wine-logos64"
export WINESERVER

# Logos variables.
LOGOS_DATA="$HOME/.logos-data"
logos_win_path="drive_c/users/$USER/Local Settings/Application Data/Logos"
LOGOS32_FOLDER="$HOME/.wine-logos/${logos_win_path}"
LOGOS64_FOLDER="${WINEPREFIX}/${logos_win_path}"

# Define stderr log for wine-related commands.
STDERR_LOG="${WINEPREFIX}/wasta-logos64-setup-wine-errors.log"

# Ensure minimum wine version before continuing.
full_version=$($WINELOADER --version)
num_version=$(echo "$full_version" | awk '{print $1}' | awk -F'-' '{print $2}')
echo "$WINELOADER version: $num_version"
maj=$(echo "$num_version" | awk -F'.' '{print $1}')
min=$(echo "$num_version" | awk -F'.' '{print $2}')
if [[ $maj -lt 6 ]]; then
    echo "Logos 64-bit requires at least v6.0 of wine. If you already have the most"
    echo "recent version of wine from the default repos, then consider installing a"
    echo "newer version from wineHQ: https://wiki.winehq.org/Ubuntu"
    exit 1
fi


# ------------------------------------------------------------------------------
# Define functions.
# ------------------------------------------------------------------------------
setup_prefix() {
    ### Setup the WINE prefix for Logos.

    cleanup_prefix

    # Copy in winetricks cache.
    if [[ -d $WINETRICKS_DIR/winetricks-cache/ ]]; then
        echo "Copying wasta-winetricks cache to user's cache..."
        mkdir -p "$HOME/.cache/winetricks"
        rsync -av $WINETRICKS_DIR/winetricks-cache/ $HOME/.cache/winetricks/ | tee >(zenity \
            $ZENITY_SETTINGS \
            --progress --pulsate --auto-close \
            --title="Copying Winetricks Cache" \
            --text="Copying Winetricks Cache... \n\n")
    fi

    # Initialize prefix.
    echo "Setting up wine prefix $WINEPREFIX..."
    mkdir -p "$WINEPREFIX"
    echo "$(date +'%F %T'): $WINELOADER wineboot" >> "$STDERR_LOG"
    "$WINELOADER" wineboot 2>> "$STDERR_LOG" | zenity $ZENITY_SETTINGS \
        --progress --pulsate --auto-close \
        --title="Setting up Wine Prefix" \
        --text="Setting up Wine Prefix... \n\n" &
    # get zenity process id
    PID_ZENITY=$!

    # get firstly created process id, which is running parallel to zenity
    PID_PROCESS=$(pgrep -o -P $$)

    progress_check $PID_ZENITY $PID_PROCESS
    if [[ "$?" -eq 99 ]]; then
        # zenity canceled, Prefix setup didn't complete
        # some failure: exit
        error_exit "<b>Setup of Logos Wine Prefix failed!</b>"
    fi

    # Make sure residual wine processes clear out.
    wait_for_wineserver

    # Make registry changes.
    "$WINELOADER" reg add "HKCU\\Software\\Wine\\DllOverrides" \
        /v winemenubuilder.exe /t REG_SZ /d '' /f 2>> "$STDERR_LOG"

    # Install helpful winetricks packages and settings.
    # NOTES:
    # - ddr: SetDirectDrawRender to GDI solves graphical glitching of various menus,
    #       etc disappearing / reappearing)
    # - fontsmooth: https://wiki.archlinux.org/index.php/Wine#Enable_font_smoothing
    # - TODO: dotnet40: ferion does not install dotnet40 explicitly,
    #       but is this needed for taking advantage of wasta-dotnet40?
    installs=( \
        "corefonts" \
        "ddr=gdi" \
        "settings fontsmooth=rgb" \
        "dotnet48" \
    )
    for i in "${installs[@]}"; do
        winetricks_install $i
    done

    cleanup_prefix

    # Make Winecfg launcher available for user.
    cp "$DIR/resources/wine-logos64-winecfg.desktop" "$HOME/.local/share/applications/"

    echo -e "Prefix setup complete.\n"
}

error_exit() {
    ### Exit script with passed message.
    zenity $ZENITY_SETTINGS \
        --error --no-wrap \
        --title="wasta-logos64-setup: Error" \
        --text="$1 \n
<i>wasta-logos64-setup will now exit.</i>" >/dev/null 2>&1

    # Ensure all wine processes are killed.
    echo "$(date +'%F %T'): $WINESERVER -k" >> "$STDERR_LOG"
    "$WINESERVER" -k 2>> "$STDERR_LOG"
    echo "$(date +'%F %T'): Exit on error." >> "$STDERR_LOG"
    exit 1
}

cleanup_prefix() {
    ### Perform various cleanup items for the Logos wine prefix.

    # Remove desktop entries referencing $PREFIX.
    # NOTE: grep --null returns null separated list to handle space in filenames.
    # NOTE: xargs -0 to handle null separated items.
    if [[ -d "$HOME/.local/share/applications" ]]; then
        grep -r -l --null "$WINEPREFIX" "$HOME/.local/share/applications" \
            | xargs -0 rm >/dev/null 2>&1
    fi
}

progress_check() {
    PID_ZENITY="$1"
    PID_PROCESS="$2"
    cmd_proc=$(ps -p $PID_PROCESS o args=)
    ### Check on process launched in parallel with zenity.
    ###     If zenity is canceled, then kill process.

    echo
    echo "*** Watching zenity window ($PID_ZENITY). If it is canceled, then"
    echo "*** $cmd_proc ($PID_PROCESS) will be killed."

    # Loop to check that progress dialog has not been canceled.
    while [[ "$PID_ZENITY" != "" ]]; do
        sleep 1

        # Check if zenity PID is still there (dialog box still open).
        PID_ZENITY=$(ps h -o pid --pid ${PID_ZENITY} | xargs)
    done

    # If other task still there, kill it.
    ps "${PID_PROCESS}"
    if [[ "$?" -eq 0 ]]; then
        # Parallel process STILL FOUND: user canceled so kill it!
        echo "*** Zenity window canceled. Killing $cmd_proc ($PID_PROCESS)."
        echo
        kill -9 ${PID_PROCESS}
        return 99
    else
        # Parallel process NOT found after zenity completed: both completed.
        echo "*** Zenity process and $cmd_proc both ended: success"
        echo
        return 0
    fi
}

wait_for_wineserver() {
    ### Run "wineserver -w" and show zenity progress window.

    if [[ -d ${1} ]]; then
        # Directory passed. Wait for it to be free before continuing.
        echo "Ignoring argument $1"
        # wait_for_process_using_dir "${1}" | zenity --progress --title="Waiting for $WINELOADER proper end" --text="Waiting for $WINELOADER to end properly..." --pulsate --auto-close --no-cancel
    fi
	echo "Waiting for wine64 to end properly..."
    echo "$(date +'%F %T'): $WINESERVER -w" >> "$STDERR_LOG"
	"$WINESERVER" -w 2>> "$STDERR_LOG" | zenity $ZENITY_SETTINGS \
        --progress --title="Waiting for $WINELOADER proper end" \
        --text="Waiting for $WINELOADER to end properly... \n\n" \
        --pulsate --auto-close --no-cancel
}

wait_for_process_using_dir() {
    ### Wait on all processes that are using the ${1} directory to finish.

	VERIFICATION_DIR="${1}"
	VERIFICATION_TIME=7
	VERIFICATION_NUM=3

	echo "---------------------"
	echo "* Starting wait_for_process_using_dir..."
	i=0 ; while true; do
		i=$((i+1))
		echo "-------"
		echo "wait_for_process_using_dir: loop with i=${i}"

		echo "wait_for_process_using_dir: sleep ${VERIFICATION_TIME}"
		sleep "${VERIFICATION_TIME}"

		FIST_PID="$(lsof -t "${VERIFICATION_DIR}" | head -n 1)"
		echo "wait_for_process_using_dir FIST_PID: ${FIST_PID}"
		if [[ -n "${FIST_PID}" ]]; then
			i=0
			echo "wait_for_process_using_dir: tail --pid=${FIST_PID} -f /dev/null"
			tail --pid="${FIST_PID}" -f /dev/null
			continue
		fi

		echo "-------"
		[ "${i}" -lt "${VERIFICATION_NUM}" ] || break
	done
	echo "* End of wait_for_process_using_dir."
	echo "---------------------"
}

wine_reg_install() {
    ### Install wine registry entries.

    REG_FILENAME="${1}"
    echo "$WINELOADER regedit.exe ${REG_FILENAME}"
    echo "$(date +'%F %T'): $WINELOADER regedit.exe ${REG_FILENAME}" >> "$STDERR_LOG"
    "$WINELOADER" regedit.exe "${REG_FILENAME}" 2>> "$STDERR_LOG" \
        | zenity $ZENITY_SETTINGS \
        --progress --title="Wine regedit" \
        --text="Wine is installing ${REG_FILENAME} in ${WINEPREFIX}" \
        --pulsate --auto-close --no-cancel

    wait_for_wineserver
}

winetricks_install() {
    ### Run winetricks commands with zenity progress.

    parts="$@"
    echo "Running \"winetricks $parts\"..."
    start=$(date +%s)
    # TODO: This "hides" any winetricks output. Maybe not a problem if
    #   everything goes right?
    echo "$(date +'%F %T'): $WINETRICKS_EXE -q $parts" >> "$STDERR_LOG"
    "$WINETRICKS_EXE" -q $parts 2>> "$STDERR_LOG" | zenity $ZENITY_SETTINGS \
        --progress --pulsate --auto-close \
        --title="Installing with winetricks" \
        --text="Running \"winetricks $parts\"... \n\n" &

    # Get zenity process id.
    PID_ZENITY=$!

    # Get firstly created process id, which is running parallel to zenity.
    PID_PROCESS=$(pgrep -o -P $$)

    progress_check $PID_ZENITY $PID_PROCESS
    if [[ "$?" -eq 99 ]]; then
        # Zenity canceled, winetricks install didn't complete.
        error_exit "<b>$parts install in Logos Wine Prefix failed!</b>"
    fi

    echo "$(date +'%F %T'): End of $WINETRICKS_EXE -q $parts" >> "$STDERR_LOG"

    # Ensure that wineserver finishes.
    wait_for_wineserver "$WINEPREFIX"
    end=$(date +%s)
    duration=$(($end - $start))
    echo -e "Completed \"winetricks $parts\" in $duration seconds.\n"
}

alt_winetricks_install() {
    ### The following is ferion11's method, for reference.

    parts="$@"
    # Make pipe for zenity input.
    pipe_winetricks="$(mktemp)"
    rm -rf "$pipe_winetricks"
    mkfifo "$pipe_winetricks"

    # zenity GUI feedback
    zenity $ZENITY_SETTINGS \
        --progress --title="Installing with winetricks $parts" \
        --text="Installing with winetricks $parts" --pulsate --auto-close \
        --window-icon=$DIR/resources/wasta-linux.svg \
        --height=150 --width=450 < "$pipe_winetricks" &
    # Get zenity process id.
    PID_ZENITY="${!}"

    echo "$(date +'%F %T'): $WINETRICKS_DIR/winetricks -q $parts" >> "$STDERR_LOG"
    "$WINETRICKS_DIR/winetricks" -q $parts 2>> "$STDERR_LOG" | tee "$pipe_winetricks"
    EC_WINETRICKS=$?

    wait "$PID_ZENITY"
    EC_ZENITY=$?

    rm -rf "$pipe_winetricks"

    # NOTE: sometimes the process finishes before the wait command, giving the error code 127
    if [[ "$EC_ZENITY" == "0" ]] || [[ "$EC_ZENITY" == "127" ]] ; then
    	if [[ "$EC_WINETRICKS" != "0" ]] ; then
            echo "$(date +'%F %T'): $WINESERVER -k" >> "$STDERR_LOG"
    		"$WINESERVER" -k 2>> "$STDERR_LOG"
    		echo "ERROR on : winetricks $parts; EC_WINETRICKS: $EC_WINETRICKS"
            exit 1
    		# gtk_fatal_error "The installation was cancelled because of sub-job failure!\n * winetricks $parts\n  - WINETRICKS_STATUS: ${WINETRICKS_STATUS}"
    	fi
    else
        echo "$(date +'%F %T'): $WINESERVER -k" >> "$STDERR_LOG"
    	"$WINESERVER" -k 2>> "$STDERR_LOG"
        exit 1
    	# gtk_fatal_error "The installation was cancelled!\n * ZENITY_RETURN: ${ZENITY_RETURN}"
    fi

    # Ensure that wineserver finishes.
    wait_for_wineserver "$WINEPREFIX"
}

# ==============================================================================
# Main Processing
# ==============================================================================

zenity $ZENITY_SETTINGS --no-wrap \
    --question --title="wasta-logos64-setup" \
    --text="<b>Do you want to install Logos (64bit) using Wine?</b>\n
<b>Processing Summary:</b>
   * Create a 'Logos 64bit Wine Prefix' using a patched wine from 'wasta-wine64'
   * Install .NET 4.8 from 'wasta-winetricks'
   * Install Logos"
if [[ "$?" -ne 0 ]]; then
    # User didn't say yes; exit.
    exit 0
fi


# ------------------------------------------------------------------------------
# Move existing Logos data to external folder.
# ------------------------------------------------------------------------------
CONTENT_DIRS=( "Data" "Documents" "Users" )
prefix_dirs=( "$LOGOS32_FOLDER" "$LOGOS64_FOLDER" )
for c in "${CONTENT_DIRS[@]}"; do
    mkdir -p "${LOGOS_DATA}/${c}"
    if [[ $(ls -A "${LOGOS_DATA}/${c}") ]]; then
        # Content folder not empty. Assume it is up-to-date and move on.
        break
    fi
    # Content folder is empty. Check prefix folders for existing user content.
    for p in "${prefix_dirs[@]}"; do
        if [[ -d "${p}/${c}" ]] && [[ ! -L "${p}/${c}" ]] && [[ $(ls -A "${p}/${c}") ]]; then
            # Prefix content folder is not a symlink and is not empty: move it.
            files=$(find "${p}/${c}" -maxdepth 1 -mindepth 1)
            echo
            echo "*** Moving existing Logos $c"
            echo "from: ${p}/${c}"
            echo "to:   ${LOGOS_DATA}/${c}"
            echo "Files:"
            echo "$files"
            echo
            # Remove LOGOS_DATA folder contents: files in $LOGOS*_FOLDER take precedence.
            rm -rf "${LOGOS_DATA}/${c}/"*
            mv "${p}/${c}/"* "${LOGOS_DATA}/${c}"
        fi
    done
done

# Make sure any residual wine processes are not running (to prevent hanging).
echo "$(date +'%F %T'): $WINESERVER -k" >> "$STDERR_LOG"
"$WINESERVER" -k 2>> "$STDERR_LOG"


# ------------------------------------------------------------------------------
# Setup Logos Prefix and install Logos
# ------------------------------------------------------------------------------
# Ensure that prefix is setup.
if [[ -d "$WINEPREFIX" ]]; then
    # WINEPREFIX exists, ask user if they want to overwrite it.
    zenity $ZENITY_SETTINGS --no-wrap \
        --question --title="wasta-logos64-setup" \
        --text="<b>Remove existing Logos 64bit Wine Prefix?</b>\n
<i>A Logos 64-bit Wine Prefix already exists at: <u>'$WINEPREFIX'</u>.\n
Do you want to delete it in order to setup a new Logos 64-bit Wine Prefix\n
and reinstall Logos?</i>\n"

    if [[ "$?" -eq 0 ]]; then
        # Remove WINEPREFIX.
        rm -rf $WINEPREFIX
    fi
    setup_prefix
else
    # No WINEPREFIX: prompt user.
    zenity $ZENITY_SETTINGS --no-wrap \
        --question --title="wasta-logos64-setup" \
        --text="<b>Setup Logos 64-bit Wine Prefix?</b>\n
<i>Do you want to setup a new Logos 64-bit Wine Prefix?</i>\n"

    if [[ "$?" -eq 0 ]]; then
        # User said yes: setup WINEPREFIX.
        setup_prefix
    else
        exit 0
    fi
fi

# Ensure that Logos installer is available.
INSTALL_FILE=""
if [[ -e "$DOWNLOAD_DIR/Logos-x64.msi" ]]; then
    INSTALL_FILE="$DOWNLOAD_DIR/Logos-x64.msi"
elif [[ -e "$INSTALLER_DIR/Logos-x64.msi" ]]; then
    INSTALL_FILE="$INSTALLER_DIR/Logos-x64.msi"
fi

if [[ -z "$INSTALL_FILE" ]]; then
    error_exit "<b>A Logos 64-bit installer wasn't found in your <i>Downloads</i> folder
or from the <i>'wasta-logos64-installer'</i> package.</b> You will need to put the
installer in one of these two locations and then re-run <i>wasta-logos64-setup</i>.

The recommended method is to install the <i>'wasta-logos64-installer'</i> package."
fi

echo
echo "*** Logos installation file: $INSTALL_FILE"
echo

# Start Logos installer.
# echo "$(date +'%F %T'): $MSIEXEC" /i "$INSTALL_FILE" /passive >> "$STDERR_LOG"
# "$MSIEXEC" /i "$INSTALL_FILE" /passive 2>> "$STDERR_LOG" # to reduce user effort
echo "$(date +'%F %T'): $MSIEXEC" /i "$INSTALL_FILE" >> "$STDERR_LOG"
"$MSIEXEC" /i "$INSTALL_FILE" 2>> "$STDERR_LOG"
OUTNUM=$?
if [[ "$OUTNUM" -ne 0 ]]; then
    # Some failure: exit
    error_exit "<b>Logos 64-bit installation failed!</b>\n
<i>Some error encountered with installation file:</i>\n
$INSTALL_FILE"
fi

# Set Wine to Vista for Logos indexer.
echo "$(date +'%F %T'): $WINELOADER reg add HKCU\\Software\\Wine\\AppDefaults\\LogosIndexer.exe /v Version /t REG_SZ /d vista /f" >> "$STDERR_LOG"
"$WINELOADER" reg add "HKCU\\Software\\Wine\\AppDefaults\\LogosIndexer.exe" \
    /v Version /t REG_SZ /d vista /f 2>> "$STDERR_LOG"
# Wait for wineserver to finish.
wait_for_wineserver "$WINEPREFIX"

# Ensure Logos launcher.
logos_exe=$(find "$WINEPREFIX" -name 'Logos.exe' | grep 'Logos/Logos.exe')
if [[ ! $logos_exe ]]; then
    echo "Logos.exe not installed. Can't make application launcher."
else
    echo "Creating Logos launcher."
    user_apps_dir="$HOME/.local/share/applications"
    mkdir -p "$user_apps_dir"
    logos_launcher="${user_apps_dir}/logos64.desktop"
    logos_exe=$(find "$WINEPREFIX" -name 'Logos.exe' | grep 'Logos/Logos.exe')
    echo "[Desktop Entry]" > "$logos_launcher"
    echo "Name=Logos Bible Software" >> "$logos_launcher"
    echo "Comment=Launches Logos Bible Software (64bit)" >> "$logos_launcher"
    echo "Exec=env WINEPREFIX=\"$WINEPREFIX\" $WINELOADER \"$logos_exe\"" >> "$logos_launcher"
    echo "Icon=${DIR}/resources/logos9-icon-48.png" >> "$logos_launcher"
    echo "Terminal=false" >> "$logos_launcher"
    echo "Type=Application" >> "$logos_launcher"
    echo "Categories=Education;" >> "$logos_launcher"
    echo "StartupWMClass=logos.exe" >> "$logos_launcher"
    chmod +x "$logos_launcher"

    # Remove automatically-created launcher.
    rm -rf "${user_apps_dir}/wine/Programs/Logos Bible Software.desktop"
fi

# Symlink to $LOGOS_DATA.
for c in "${CONTENT_DIRS[@]}"; do
    rm -rf "$LOGOS64_FOLDER/${c}"
    ln -s "$LOGOS_DATA/${c}" "$LOGOS64_FOLDER/${c}"
done

# Final zenity window.
zenity $ZENITY_SETTINGS --no-wrap \
    --info --title="wasta-logos64-setup: Complete" \
    --text="<b>Logos 64-bit setup complete!</b>\n
<i>Find 'Logos Bible Software' in the <u>Main Menu</u>
under the <u>'Education'</u> category</i>"

echo "$(date +'%F %T'): End of wasta-logos64-setup." >> "$STDERR_LOG"
exit 0
